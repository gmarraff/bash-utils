#!/usr/bin/env python

import argparse
import shutil
import subprocess
import tempfile
import time

from copy import copy
from dataclasses import dataclass
from typing import List

TMP_BRANCH_NAME=f"tmpbranch-{time.time_ns()}"
TMP_REMOTE_NAME=f"tmpremote-{time.time_ns()}"

@dataclass
class Config:
    source_repo_path: str
    source_branch: str
    dest_repo_path: str
    dest_branch: str
    source_dir: str = ""
    dest_dir: str = ""

def is_remote_repo(idf: str) -> bool:
    return idf.startswith("http") or idf.startswith("git@")

def clone_repo(repo_url: str) -> str:
    repo_path = tempfile.mkdtemp()
    cmd = f"git clone {repo_url} {repo_path}".split(" ")
    subprocess.run(cmd, check=True)
    return repo_path



def prepare_repositories(cfg: Config) -> (Config, List[str]):
    tmpdirs = list()
    updated_cfg = copy(cfg)
    if is_remote_repo(cfg.source_repo_path):
        updated_cfg.source_repo_path = clone_repo(cfg.source_repo_path)
        tmpdirs.append(updated_cfg.source_repo_path)
    if is_remote_repo(cfg.dest_repo_path):
        updated_cfg.dest_repo_path = clone_repo(cfg.dest_repo_path)
        tmpdirs.append(updated_cfg.dest_repo_path)
    return cfg, tmpdirs

def create_branch_with_subtree(cfg: Config):
    pass

def cleanup(cfg: Config, tmpdirs: List[str]):
    for tmpdir in tmpdirs:
        shutil.rmtree(tmpdir)

def merge_branch_into_another_repo(cfg: Config) -> List[str]:
    return [
        f"cd {cfg.dest_repo}",
        f"git checkout main",
        f"git pull",
        f"git checkout -b {cfg.dest_branch}",
        f"git remote add -f {TMP_REMOTE_NAME} {cfg.source_repo}",
        f"git merge -s ours --no-commit {TMP_REMOTE_NAME}/{cfg.source_branch} --allow-unrelated-histories",
        f"git read-tree --prefix=$DEST_DIR -u {TMP_REMOTE_NAME}/{cfg.source_branch}:",
        f"git remote remove {TMP_REMOTE_NAME}",
        "git commit",
    ]

def cli():
    parser = argparse.ArgumentParser(
        "git_subtree_helper",
        description="Helper for merging a whole or partial repository and their history in another one.",
    )
    parser.add_argument("--source-repo", dest="source_repo_path", type=str, required=True)
    parser.add_argument("--source-branch", type=str, required=True)
    parser.add_argument("--source-dir", type=str, default="")
    parser.add_argument("--dest-repo", dest="dest_repo_path", type=str, required=True)
    parser.add_argument("--dest-branch", type=str, required=True)
    parser.add_argument("--dest-dir", type=str, default="")

    args = parser.parse_args()
    cfg = Config(**vars(args))

    cfg, tmpdirs = prepare_repositories(cfg)

    prepare_repositories(cfg)

    cmd: List[str] = list()
    if cfg.source_dir:
        cmd += create_branch_with_subtree(cfg)
    cmd += merge_branch_into_another_repo(cfg)

    cleanup(cfg, tmpdirs)




if __name__ == "__main__":
    cli()
