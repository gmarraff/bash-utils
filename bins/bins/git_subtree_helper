#!/usr/bin/env python

import argparse
import os
import shutil
import subprocess
import tempfile
import time

from copy import copy
from dataclasses import dataclass
from typing import List


TMP_BRANCH_NAME=f"tmpbranch-{time.time_ns()}"
TMP_REMOTE_NAME=f"tmpremote-{time.time_ns()}"


@dataclass
class Config:
    source_repo_path: str
    source_branch: str
    dest_repo_path: str
    dest_branch: str
    source_dir: str = ""
    dest_dir: str = ""
    push: bool = False
    dest_origin_branch: str = "main"

def is_remote_repo(idf: str) -> bool:
    return idf.startswith("http") or idf.startswith("git@")

def clone_repo(repo_url: str) -> str:
    repo_path = tempfile.mkdtemp()
    cmd = f"git clone {repo_url} {repo_path}".split(" ")
    subprocess.run(cmd, check=True)
    return repo_path

def prepare_repositories(cfg: Config) -> tuple[Config, List[str]]:
    tmpdirs = list()
    updated_cfg = copy(cfg)
    if is_remote_repo(cfg.source_repo_path):
        updated_cfg.source_repo_path = clone_repo(cfg.source_repo_path)
        tmpdirs.append(updated_cfg.source_repo_path)
    if is_remote_repo(cfg.dest_repo_path):
        updated_cfg.dest_repo_path = clone_repo(cfg.dest_repo_path)
        tmpdirs.append(updated_cfg.dest_repo_path)
    return updated_cfg, tmpdirs

def create_branch_with_subtree(cfg: Config):
    return [
        f"cd {cfg.source_repo_path}",
        "git fetch",
        f"git checkout {cfg.source_branch}",
        f"git subtree split --prefix={cfg.source_dir} -b {TMP_BRANCH_NAME}",
        "\n",
    ]

def cleanup(tmpdirs: List[str], script_location: str):
    for tmpdir in tmpdirs:
        shutil.rmtree(tmpdir)
    os.remove(script_location)

def merge_branch_into_another_repo(cfg: Config) -> List[str]:
    cmd = [
        f"cd {cfg.dest_repo_path}",
        f"git checkout main",
        f"git pull",
        f"git checkout -b {cfg.dest_branch}",
        f"git remote add -f {TMP_REMOTE_NAME} {cfg.source_repo_path}",
        f"git merge -s ours --no-commit {TMP_REMOTE_NAME}/{cfg.source_branch} --allow-unrelated-histories",
        f"git read-tree --prefix={cfg.dest_dir} -u {TMP_REMOTE_NAME}/{cfg.source_branch}:",
        f"git remote remove {TMP_REMOTE_NAME}",
        "git commit",
    ]
    if cfg.push:
        cmd.append(f"git push --set-upstream origin {cfg.dest_branch}")
    return cmd

def cli():
    parser = argparse.ArgumentParser(
        "git_subtree_helper",
        description=(
            "Helper for merging a whole or partial repository and its history in a directory of another repo.\n"
            "Repositories can be either local or remote ones. In case of the latter, it will be cloned."
            "Every operation will be performed locally."
        ),
        epilog=(
            "EXAMPLES\n"
            "git_subtree_helper --source-branch main --source-repo A --dest-dir=X --dest-repo B --dest-branch feature\n"
            "\tclone main branch of repo A and its history in folder X of repository B\n"
            "git_subtree_helper --source-dir Y --source-branch main --source-repo A  --dest-dir=X --dest-repo B --dest-branch feature\n"
            "\tclone folder Y in main branch of repo A in folder X of repository B (only the history of folder Y will be imported)"
        ),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument("--source-repo", dest="source_repo_path", type=str, required=True, help="Repository to be imported (remote or local)")
    parser.add_argument("--source-branch", type=str, required=True, help="Branch of the source repo")
    parser.add_argument("--source-dir", type=str, default="", help="Folder of the repo to import (leave blank to import the whole repo)")
    parser.add_argument("--dest-repo", dest="dest_repo_path", type=str, required=True, help="Repository that will host the source repo (remote or local)")
    parser.add_argument("--dest-branch", type=str, required=True, help="Branch to create in the destination repo to perform the operations")
    parser.add_argument("--dest-dir", type=str, required=True, help="Directory of the destination repo where to import the source repo into")
    parser.add_argument("--dest-origin-branch", type=str, default="main", help="Branch from where to create the operational branch in the destination repo (default: main)")
    parser.add_argument("--push", action="store_true", help="Pushes the operational branch on the remote")

    args = parser.parse_args()
    cfg = Config(**vars(args))

    cfg, tmpdirs = prepare_repositories(cfg)

    cmd: List[str] = ["set -e\n\n"]
    if cfg.source_dir:
        cmd += create_branch_with_subtree(cfg)
        cfg.source_branch = TMP_BRANCH_NAME
    cmd += merge_branch_into_another_repo(cfg)

    _, script_location = tempfile.mkstemp(text=True)

    with open(script_location, "w") as script:
        script_content = "\n".join(cmd)
        print(script_content)
        script.write(script_content)

    subprocess.run(["/bin/bash", script_location], check=True)

    cleanup(tmpdirs, script_location)


if __name__ == "__main__":
    cli()
